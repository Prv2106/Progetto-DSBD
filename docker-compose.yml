version: '3.8'
services:
  db:
    build:
      context: ./DB
      dockerfile: dockerfile-mysql
    networks:
      - net1
      - net2
    volumes:
      - db_vol:/var/lib/mysql
    container_name: mysql_container

  data-collector:
    build:
      context: .
      dockerfile: DataCollector/dockerfile-datacollector
    depends_on:
      - db
      - kafka
    networks:
      - net2
    container_name: break_collector_container
    restart: always

  server-grpc:
    build:
      context: .
      dockerfile: gRPC/dockerfile-server
    depends_on:
      - db
    networks:
      - net1
    container_name: grpc_server_container
    ports:
      - "50051:50051"
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper_container
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - net2
    restart: always

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka_container
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_container:9092  # Usa kafka_container come nome host
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_LISTENER_PORT: 9092
      KAFKA_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

    networks:
      - net2
    ports:
      - "9092:9092"
    restart: always
    volumes:
      - kafka_data:/var/lib/kafka/data

  alert-system:
    build:
      context: .
      dockerfile: AlertSystem/dockerfile-alertsystem
    depends_on:
      - kafka
      - db
    networks:
      - net2
    container_name: alert_system_container
    restart: always

  alert-notifier-system:
    build:
      context: ./AlertNotifierSystem
      dockerfile: dockerfile-notifier
    depends_on:
      - kafka
    networks:
      - net2
    container_name: alert_notifier_container
    restart: always

networks:
  net1:
    driver: bridge
  net2:
    driver: bridge

volumes:
  db_vol:
    driver: local
  kafka_data:
    driver: local