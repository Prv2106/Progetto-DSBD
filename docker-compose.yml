version: '3.8'

services:
  db:
    build:
      context: ./DB
      dockerfile: dockerfile-mysql
    networks:
      - net1
      - net2
    volumes:
      - db_vol:/var/lib/mysql
    container_name: mysql_container

  server-grpc:
    build:
      context: .
      dockerfile: gRPC/dockerfile-server
    depends_on:
      - db
    networks:
      - net1
    container_name: grpc_server_container
    ports:
      - "50051:50051"
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper_container
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - net2
    restart: always

  
  ###### 3 broker di Kafka ######
  kafka-broker-1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-broker-1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_broker-1:9092,PLAINTEXT_INTERNAL://localhost:19092 
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    networks:
      - net2
    restart: always
    volumes:
      - kafka_broker_1_data:/var/lib/kafka/data

  kafka-broker-2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-broker-2
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-2:9092,PLAINTEXT_INTERNAL://localhost:29092  
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    networks:
      - net2
    restart: always
    volumes:
      - kafka_broker_2_data:/var/lib/kafka/data

  kafka-broker-3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-broker-3_container
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_broker-3:9092,PLAINTEXT_INTERNAL://localhost:39092  
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    networks:
      - net2
    restart: always
    volumes:
      - kafka_broker_3_data:/var/lib/kafka/data
    
  ####### ADMIN KAFKA (creazione topic e monitoraggio) #######
  kafka-admin:
    build:
      context: ./KafkaAdmin
      dockerfile: dockerfile-kafka-admin
    container_name: kafka-admin-container
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    networks:
      - net2
    restart: always
    
  ###### produttori e consumatori kafka ######
  data-collector:
    build:
      context: .
      dockerfile: DataCollector/dockerfile-datacollector
    depends_on:
      - db
      - kafka-admin
    networks:
      - net2
    container_name: break_collector_container
    restart: always

  alert-system:
    build:
      context: .
      dockerfile: AlertSystem/dockerfile-alertsystem
    depends_on:
      - db
      - kafka-admin
    networks:
      - net2
    container_name: alert_system_container
    restart: always

  alert-notifier-system:
    build:
      context: .
      dockerfile: AlertNotifierSystem/dockerfile-notifier
    depends_on:
      - kafka-admin
    networks:
      - net2
    container_name: alert_notifier_container
    restart: always


networks:
  net1:
    driver: bridge
  net2:
    driver: bridge

volumes:
  db_vol:
    driver: local
  kafka_broker_1_data:
    driver: local
  kafka_broker_2_data:
    driver: local
  kafka_broker_3_data:
    driver: local
  